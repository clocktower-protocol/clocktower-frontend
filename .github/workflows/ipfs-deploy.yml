name: Deploy to IPFS

on:
  push:
    branches: [ master, main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Deploy to Pinata
      run: |
        echo "üì§ Deploying to Pinata..."
        
        # Debug: Check if build directory exists
        echo "üìÅ Checking build directory..."
        ls -la build/
        
        # Create a temporary file for the request
        echo '{"pinataOptions": {"cidVersion": 1}, "pinataMetadata": {"name": "clocktower-frontend", "keyvalues": {"deployed": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}}}' > pinata-metadata.json
        
        echo "üìÑ Pinata metadata:"
        cat pinata-metadata.json
        
        # Upload to Pinata with verbose output
        echo "üîÑ Uploading to Pinata..."
        response=$(curl -X POST \
          -H "pinata_api_key: ${{ secrets.PINATA_API_TOKEN }}" \
          -H "pinata_secret_api_key: ${{ secrets.PINATA_SECRET_ACCESS_TOKEN }}" \
          -F "file=@build" \
          -F "pinataMetadata=@pinata-metadata.json" \
          https://api.pinata.cloud/pinning/pinFileToIPFS \
          -w "\nHTTP_STATUS:%{http_code}\n")
        
        echo "üì• Pinata response:"
        echo "$response"
        
        # Extract HTTP status
        http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
        echo "üåê HTTP Status: $http_status"
        
        # Extract the IPFS hash (only if status is 200)
        if [ "$http_status" = "200" ]; then
          ipfs_hash=$(echo "$response" | grep -v "HTTP_STATUS:" | jq -r '.IpfsHash')
          echo "üéØ Extracted IPFS hash: $ipfs_hash"
        else
          echo "‚ùå Upload failed with status: $http_status"
          echo "üîç Full response: $response"
          exit 1
        fi
        
        # Set output for next steps
        echo "ipfs_hash=$ipfs_hash" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Deployed to IPFS: $ipfs_hash"
        echo "üåê Gateway URL: https://gateway.pinata.cloud/ipfs/$ipfs_hash"
    
    - name: Update Cloudflare Worker KV
      run: |
        echo "üîÑ Updating Cloudflare KV with hash: ${{ steps.deploy.outputs.ipfs_hash }}"
        
        curl -X PUT \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"value": "${{ steps.deploy.outputs.ipfs_hash }}"}' \
          "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/storage/kv/namespaces/${{ secrets.CLOUDFLARE_KV_NAMESPACE_ID }}/values/latest"
        
        echo "‚úÖ Cloudflare KV updated successfully"
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üåê **IPFS Deployment Complete!**\n\nYour app is now available at:\n- IPFS Gateway: https://gateway.pinata.cloud/ipfs/${{ steps.deploy.outputs.ipfs_hash }}\n- Custom Domain: https://ipfs.clocktower.finance\n- IPFS Hash: \`${{ steps.deploy.outputs.ipfs_hash }}\``
          })
